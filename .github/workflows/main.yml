####################### Google Cloud 버전 #######################

#name: Deploy to Server
#
#on:
#  push:
#    branches: [ main ]
#
#jobs:
#  deploy:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#
#      - name: Deploy to Server
#        env:
#          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
#          SERVER_IP: ${{ secrets.SERVER_IP }}
#          SERVER_USER: ${{ secrets.SERVER_USER }}
#        run: |
#          mkdir -p ~/.ssh
#          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
#          chmod 600 ~/.ssh/id_rsa
#          ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts
#          ssh $SERVER_USER@$SERVER_IP << 'ENDSSH'
#          # NVM 초기화
#          export NVM_DIR="$HOME/.nvm"
#          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
#
#          # Node.js 버전 확인 및 설정
#          nvm use 18 || nvm install 18
#
#          # 전역 패키지 설치
#          npm install -g yarn pm2
#
#          # 애플리케이션 배포
#          cd ~/travel-duo-server
#          git pull origin main
#          yarn
#          npm run build
#          pm2 restart travel-duo-server || pm2 start npm --name "travel-duo-server" -- start:prod
#          ENDSSH

####################### EC2 버전 #######################

#name: Deploy to Server
#
#on:
#  push:
#    branches: [ main ]
#
#jobs:
#  deploy:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      # AWS credentials 설정
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ secrets.AWS_REGION }}
#
#      - name: Install SSH Key
#        run: |
#          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
#          chmod 600 ~/.ssh/id_rsa
#
#      - name: Deploy to EC2 via SSH
#        run: |
#          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
#
#          # NVM 초기화
#          export NVM_DIR="$HOME/.nvm"
#          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
#
#          # Node.js 버전 확인 및 설정
#          nvm use 18 || nvm install 18
#
#          # 애플리케이션 배포
#          cd /home/ec2-user/travel-duo-server  # 애플리케이션 경로
#          git pull origin main  # 최신 코드 가져오기
#          yarn install  # 의존성 설치
#          npm run build  # 애플리케이션 빌드
#          pm2 restart travel-duo-server || pm2 start npm --name "travel-duo-server"  # PM2로 애플리케이션 재시작
#          EOF

name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Deploy to AWS EC2
        run: |
          # SSH 설정
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

          # SSH를 통해 EC2에 접속하여 명령 실행
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'ENDSSH'
          # NVM 초기화
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

          # Node.js 버전 확인 및 설정
          nvm use 18 || nvm install 18

          # 전역 패키지 설치
          npm install -g yarn pm2

          # 애플리케이션 배포
          cd ~/travel-duo-server  # 배포할 디렉터리 경로
          git pull origin main
          yarn install
          yarn build
          pm2 restart travel-duo-server || pm2 start npm --name "travel-duo-server" -- start:prod
          ENDSSH